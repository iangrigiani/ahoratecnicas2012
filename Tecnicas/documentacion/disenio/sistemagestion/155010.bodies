class Consola
!!!172930.java!!!	run() : void
		mensaje("Bienvenido al administrador de mails. Para solicitar ayuda escriba, \"ayuda\"");
		this.leer();
		
!!!173058.java!!!	Consola(in clazz : Class< ? >)

			try {		
				invocador = clazz.getConstructors()[0]
				                                    .newInstance(new Object[0]);

			} catch (Exception e) {
				e.printStackTrace();
			}
!!!173186.java!!!	obtenerDatos(in mensaje : String) : String
	
		BufferedReader br = new BufferedReader(
				new InputStreamReader(System.in));

		if (mensaje != null && !mensaje.equals("")) {
			System.out.print(Consola.PROMPCHAR + mensaje);
		}
		
		String result = "";
		
		try {
			result = br.readLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return result;
!!!173314.java!!!	mensaje(in mensaje : String) : void
		
		System.out.println(Consola.PROMPCHAR + mensaje);
!!!173442.java!!!	mensajeSinSalto(in mensaje : String) : void
		System.out.print(mensaje);
!!!173570.java!!!	leer() : void
		
		BufferedReader br = new BufferedReader(
				new InputStreamReader(System.in));
		
		String linea = "";
		int pos = 0;
		/*Parametros para el metodo que voy a invocar.
		El primero es siempre de tipo interfaz "InterfazUsuario".
		Los demas son siempre String.*/
		Object[] params = null;
		//Tipo de parametros.
		Class[] paramsClass = null;
		//Auxiliar para armar los parametros.
		String[] paramsAux = null;
		//El comando que voy a ejecutar.
		String comando = "";
		try {
			
			//Mientras no se ponga "FIN" o "fin".
			do {
				//Escrivo un promp
				System.out.print(Consola.PROMPCHAR);
				//Me quedo esperando por lo que ingrese el usuario.
				linea = br.readLine();
				try {
					
					pos = linea.indexOf(" ");
					//Si es un comando con parametros.
					if (pos != -1) {
						paramsAux = parser.parseLine(linea.substring(pos + 1));
						params = new Object[paramsAux.length + 1];
						params[0] = this;
						for (int i = 0; i < paramsAux.length; i++) {
							params[i + 1] = paramsAux[i];
						}
						paramsClass = new Class[params.length];
						paramsClass[0] = InterfazUsuario.class;
						for (int i = 1; i < params.length; i++) {
							paramsClass[i] = String.class;
						}
						comando = linea.substring(0, pos);

					} else { // Si es un comando sin parametros.
						comando = linea.trim();
						paramsClass = new Class[1];
						paramsClass[0] = InterfazUsuario.class;
						params = new Object[1];
						params[0] = this;
					}

					try {
						
						//Intento llamar al metodo que pide el usuario.
						Object resultado = 
							invocador.getClass().getMethod(comando, paramsClass)
								.invoke(invocador, params);
						
						//Escribo el resultado.
						if (resultado != null) {
							System.out.println(Consola.PROMPCHAR
									+ resultado.toString());
							resultado = null;
						}
						
					} catch (Exception e) {
						//Indico que no conozco el comando y espero por otro.
						if (!comando.equalsIgnoreCase(Consola.ENDWORD)
								&& !comando.equals("")) {
							System.out.println(Consola.PROMPCHAR
									+ "No se encuentra el comando solicitado: "
									+ linea);
						}
						//LOGGER.error(e.getMessage(), e);
					}
					
				} catch (Exception e) {
					//LOGGER.error("Error: " + e.getMessage(), e);
				}
				
			} while (!linea.equalsIgnoreCase(Consola.ENDWORD));
			
			try {
				paramsClass = new Class[1];
				paramsClass[0] = InterfazUsuario.class;
				invocador.getClass().getMethod("quit", InterfazUsuario.class)
						.invoke(invocador, this);
				
			} catch (Exception e) {
				//LOGGER.error("Error: " + e.getMessage(), e);
			}	
			
		} catch (IOException e) {
			//LOGGER.error("Error: " + e.getMessage(), e);
		}
